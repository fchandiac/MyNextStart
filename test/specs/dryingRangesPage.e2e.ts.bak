import { authenticateForTests } from '../helpers/auth';

describe('Página de rangos de secado /paddy/receptions/drying', () => {
  beforeEach(async () => {
    // Autenticarse
    try {
      await authenticateForTests(browser);
      console.log('Autenticación completada exitosamente');
    } catch (error) {
      console.error('Error durante la autenticación:', error);
      throw error;
    }
    
    // Navegar a la página de rangos de secado
    await browser.url('/paddy/receptions/drying');
    
    // Esperar a que la página se cargue completamente (tiempo aumentado para mayor estabilidad)
    await browser.pause(5000);
    
    // Verificar que estamos en la página correcta
    const url = await browser.getUrl();
    if (!url.includes('/paddy/receptions/drying')) {
      console.log('Redirección detectada a:', url);
      // Tomar captura de pantalla para diagnóstico
      await browser.saveScreenshot('./errorShots/drying-ranges-redirect.png');
      throw new Error(`Redirección inesperada a: ${url}. Verifica que la autenticación funcionó correctamente.`);
    }

    // Verificar que la página ha cargado correctamente
    try {
      // Buscar el título de la página de varias formas para mejorar la robustez
      const pageTitle = await $('h6, .MuiTypography-root');
      await pageTitle.waitForExist({ timeout: 5000 });
      
      // Verificar que el título contiene "Rangos % de secado"
      const titleText = await pageTitle.getText();
      if (!titleText.includes('Rangos % de secado')) {
        console.error('El título no coincide. Título encontrado:', titleText);
        await browser.saveScreenshot('./errorShots/drying-ranges-title-error.png');
        throw new Error('No se encontró el título "Rangos % de secado" en la página');
      }
      console.log('Página de rangos de secado cargada correctamente');
    } catch (error) {
      console.error('Error esperando que la página cargue:', error);
      await browser.saveScreenshot('./errorShots/drying-ranges-load-error.png');
      throw error;
    }
  });

  /**
   * Test principal que realizará operaciones CRUD (Crear, Leer, Actualizar, Eliminar)
   * en rangos de secado múltiples veces con diferentes valores
   */
  it('debe permitir crear, actualizar y eliminar rangos de secado múltiples veces', async () => {
    // Datos de prueba para los rangos (reducidos para la prueba)
    const testRanges = [
      { start: 10, end: 15, percent: 2.5 },
      { start: 16, end: 20, percent: 3.5 },
      { start: 21, end: 25, percent: 4.5 }
    ];

    // Función para encontrar el botón de crear rango ("+")
    const findAddButton = async () => {
      try {
        // Intentar encontrar el botón por diferentes selectores
        const possibleSelectors = [
          'button[aria-label="add"]', 
          '.MuiFab-root', 
          '.MuiFab-primary',
          'button:has(svg[data-testid="AddIcon"])'
        ];
        
        for (const selector of possibleSelectors) {
          try {
            const button = await $(selector);
            if (await button.isExisting()) {
              return button;
            }
          } catch (e) {
            // Intentar con el siguiente selector
          }
        }
        
        // Si todavía no encontramos, buscar por texto
        const fabButtons = await $$('.MuiFab-root');
        if (fabButtons.length > 0) {
          return fabButtons[0]; // Devolver el primer botón fab
        }
        
        throw new Error('No se pudo encontrar el botón de añadir');
      } catch (error) {
        console.error('Error al buscar el botón de añadir:', error);
        await browser.saveScreenshot('./errorShots/add-button-not-found.png');
        throw error;
      }
    };

    // Para cada rango de prueba, realizaremos un ciclo completo de CRUD
    for (let i = 0; i < testRanges.length; i++) {
      const range = testRanges[i];
      console.log(`Iteración ${i+1}/${testRanges.length} - Procesando rango: ${JSON.stringify(range)}`);
      
      // CREAR RANGO
      try {
        // 1. Hacer clic en el botón de añadir
        console.log('Buscando el botón de añadir...');
        const addButton = await findAddButton();
        await addButton.waitForClickable({ timeout: 5000 });
        await addButton.click();
        console.log('Botón de añadir encontrado y pulsado');
        await browser.pause(1000);
        
        // 2. Completar el formulario
        console.log('Completando el formulario...');
        // Esperar a que el diálogo esté visible
        const dialog = await $('.MuiDialog-root');
        await dialog.waitForExist({ timeout: 5000 });
        
        // Esperar a que los campos del formulario sean visibles
        const startInput = await dialog.$('input[name="start"]');
        const endInput = await dialog.$('input[name="end"]');
        const percentInput = await dialog.$('input[name="percent"]');
        
        await startInput.waitForExist({ timeout: 5000 });
        
        // Limpiar y establecer los valores
        await startInput.clearValue();
        await browser.pause(300);
        await startInput.setValue(range.start.toString());
        
        await endInput.clearValue();
        await browser.pause(300);
        await endInput.setValue(range.end.toString());
        
        await percentInput.clearValue();
        await browser.pause(300);
        await percentInput.setValue(range.percent.toString());
        
        console.log(`Valores establecidos: inicio=${range.start}, fin=${range.end}, porcentaje=${range.percent}`);
        
        // 3. Hacer clic en el botón de guardar
        const saveButton = await dialog.$('button[type="submit"]');
        await saveButton.waitForClickable({ timeout: 5000 });
        await saveButton.click();
        
        // 4. Esperar a que se cierre el formulario y aparezca una alerta de éxito
        await browser.pause(2000);
        
        // Verificar que el diálogo se ha cerrado
        const dialogStillExists = await dialog.isExisting();
        if (dialogStillExists) {
          console.warn('El diálogo sigue abierto después de guardar, verificando errores...');
          
          // Comprobar si hay errores en el formulario
          const errorMessages = await dialog.$$('.MuiFormHelperText-root.Mui-error');
          if (errorMessages.length > 0) {
            const errorTexts = await Promise.all(errorMessages.map(e => e.getText()));
            console.error('Errores en el formulario:', errorTexts);
            throw new Error(`Error al crear rango: ${errorTexts.join(', ')}`);
          }
          
          // Si no hay errores visibles pero el diálogo sigue abierto, intentar cerrar
          try {
            const cancelButton = await dialog.$('button*=Cancelar');
            if (await cancelButton.isExisting()) {
              await cancelButton.click();
            }
          } catch (e) {
            console.warn('No se pudo cerrar el diálogo:', e);
          }
          
          throw new Error('El formulario no se cerró después de guardar y no se detectaron errores específicos');
        }
        
        console.log('Rango creado correctamente');
        
        // Esperar a que se actualice la tabla
        await browser.pause(1000);
        
        // ACTUALIZAR RANGO
        console.log('Buscando el rango creado para actualizarlo...');
        
        // Intentar encontrar la fila que contiene el rango que acabamos de crear
        const cells = await $$('.MuiDataGrid-cell');
        let rowElement = null;
        
        for (const cell of cells) {
          try {
            const text = await cell.getText();
            if (text === range.start.toString()) {
              // Encontramos la celda con el valor de inicio
              rowElement = await cell.$('..');  // Obtener el elemento padre (fila)
              console.log('Encontrada celda con el valor de inicio del rango');
              break;
            }
          } catch (e) {
            // Continuar con la siguiente celda
          }
        }
        
        if (!rowElement) {
          // Intentar encontrar la fila de otra manera
          console.log('Buscando la fila por método alternativo...');
          const rows = await $$('.MuiDataGrid-row');
          
          for (const row of rows) {
            const rowCells = await row.$$('.MuiDataGrid-cell');
            for (const cell of rowCells) {
              try {
                const text = await cell.getText();
                if (text === range.start.toString()) {
                  rowElement = row;
                  console.log('Encontrada fila del rango por método alternativo');
                  break;
                }
              } catch (e) {
                // Continuar con la siguiente celda
              }
            }
            if (rowElement) break;
          }
        }
        
        if (rowElement) {
          // Buscar el botón de editar en la fila
          let editButton = null;
          
          try {
            // Primero intentar por aria-label
            editButton = await rowElement.$('button[aria-label="Editar"]');
            if (!(await editButton.isExisting())) {
              // Luego intentar encontrarlo por el ícono
              const buttons = await rowElement.$$('button');
              for (const btn of buttons) {
                try {
                  const icon = await btn.$('svg[data-testid="EditIcon"]');
                  if (await icon.isExisting()) {
                    editButton = btn;
                    break;
                  }
                } catch (e) {
                  // Continuar con el siguiente botón
                }
              }
            }
          } catch (e) {
            console.warn('Error al buscar el botón de editar:', e);
          }
          
          if (editButton && await editButton.isExisting()) {
            await editButton.waitForClickable({ timeout: 5000 });
            await editButton.click();
            console.log('Botón de editar pulsado');
            
            // Esperar a que se abra el formulario de edición
            await browser.pause(1000);
            
            // Modificar el valor del porcentaje
            const editDialog = await $('.MuiDialog-root');
            await editDialog.waitForExist({ timeout: 5000 });
            
            const editPercentInput = await editDialog.$('input[name="percent"]');
            await editPercentInput.waitForExist({ timeout: 5000 });
            
            // Incrementar el porcentaje en 0.5
            const newPercent = range.percent + 0.5;
            await editPercentInput.clearValue();
            await browser.pause(300);
            await editPercentInput.setValue(newPercent.toString());
            console.log(`Porcentaje modificado a ${newPercent}`);
            
            // Guardar los cambios
            const updateButton = await editDialog.$('button[type="submit"]');
            await updateButton.waitForClickable({ timeout: 5000 });
            await updateButton.click();
            
            // Esperar a que se cierre el formulario
            await browser.pause(2000);
            console.log(`Rango actualizado: inicio=${range.start}, fin=${range.end}, porcentaje=${newPercent}`);
          } else {
            console.warn(`No se encontró el botón de editar para el rango con inicio=${range.start}`);
          }
          
          // ELIMINAR RANGO (solo si i es par, para dejar algunos rangos en la base de datos)
          if (i % 2 === 0) {
            console.log('Buscando el rango para eliminarlo...');
            
            // Buscar el botón de eliminar en la fila
            let deleteButton = null;
            
            try {
              // Primero intentar por aria-label
              deleteButton = await rowElement.$('button[aria-label="Eliminar"]');
              if (!(await deleteButton.isExisting())) {
                // Luego intentar encontrarlo por el ícono
                const buttons = await rowElement.$$('button');
                for (const btn of buttons) {
                  try {
                    const icon = await btn.$('svg[data-testid="DeleteIcon"]');
                    if (await icon.isExisting()) {
                      deleteButton = btn;
                      break;
                    }
                  } catch (e) {
                    // Continuar con el siguiente botón
                  }
                }
              }
            } catch (e) {
              console.warn('Error al buscar el botón de eliminar:', e);
            }
            
            if (deleteButton && await deleteButton.isExisting()) {
              await deleteButton.waitForClickable({ timeout: 5000 });
              await deleteButton.click();
              console.log('Botón de eliminar pulsado');
              
              // Esperar a que aparezca el diálogo de confirmación
              await browser.pause(1000);
              
              // Buscar el diálogo de confirmación
              const confirmDialog = await $('.MuiDialog-root');
              await confirmDialog.waitForExist({ timeout: 5000 });
              
              // Confirmar la eliminación - probando diferentes textos de botón
              const confirmButtonSelectors = [
                'button=Confirmar',
                'button=Eliminar',
                'button=Sí',
                'button=Aceptar'
              ];
              
              let confirmButtonFound = false;
              for (const selector of confirmButtonSelectors) {
                try {
                  const button = await confirmDialog.$(selector);
                  if (await button.isExisting() && await button.isClickable()) {
                    await button.click();
                    confirmButtonFound = true;
                    console.log(`Botón de confirmación encontrado y pulsado: ${selector}`);
                    break;
                  }
                } catch (e) {
                  // Continuar con el siguiente selector
                }
              }
              
              // Si no encontramos ninguno de los botones específicos, intentar con el último botón
              if (!confirmButtonFound) {
                const buttons = await confirmDialog.$$('button');
                if (buttons.length > 0) {
                  const lastButton = buttons[buttons.length - 1];
                  await lastButton.click();
                  confirmButtonFound = true;
                  console.log('Se utilizó el último botón del diálogo para confirmar');
                }
              }
              
              if (confirmButtonFound) {
                await browser.pause(2000);
                console.log(`Rango eliminado: inicio=${range.start}, fin=${range.end}`);
              } else {
                console.error('No se encontró el botón de confirmación para eliminar el rango');
                await browser.saveScreenshot('./errorShots/confirm-button-not-found.png');
              }
            } else {
              console.warn(`No se pudo encontrar el botón de eliminar para el rango con inicio=${range.start}`);
            }
          }
        } else {
          console.warn(`No se encontró la fila para el rango con inicio=${range.start}`);
        }
      } catch (error) {
        console.error(`Error en la iteración ${i+1}:`, error);
        await browser.saveScreenshot(`./errorShots/error-iteration-${i+1}.png`);
        // Continuar con la siguiente iteración a pesar del error
      }
      
      // Esperar un momento antes de la siguiente iteración
      await browser.pause(1000);
    }
    
    // Verificar el estado final de la tabla
    const rows = await $$('.MuiDataGrid-row');
    console.log(`Total de filas en la tabla al final del test: ${rows.length}`);
    
    // Esperamos que haya al menos algunos rangos en la tabla
    expect(rows.length).toBeGreaterThanOrEqual(1);
  });

  /**
   * Test que verifica la validación del formulario
   */
  it('debe mostrar errores de validación cuando se ingresa un rango inválido', async () => {
    // 1. Hacer clic en el botón de añadir
    try {
      console.log('Buscando botón de añadir para test de validación...');
      
      // Buscar el botón de forma más robusta
      const addButton = await $('.MuiFab-root, button[aria-label="add"]');
      await addButton.waitForClickable({ timeout: 5000 });
      await addButton.click();
      await browser.pause(1000);
      
      // 2. Esperar a que aparezca el diálogo
      const dialog = await $('.MuiDialog-root');
      await dialog.waitForExist({ timeout: 5000 });
      console.log('Diálogo de creación abierto');
      
      // Obtener referencias a los campos del formulario
      const startInput = await dialog.$('input[name="start"]');
      const endInput = await dialog.$('input[name="end"]');
      const percentInput = await dialog.$('input[name="percent"]');
      
      await startInput.waitForExist({ timeout: 5000 });
      
      // 3. Intentar guardar con valores inválidos (fin menor que inicio)
      await startInput.clearValue();
      await browser.pause(300);
      await startInput.setValue('20');
      
      await endInput.clearValue();
      await browser.pause(300);
      await endInput.setValue('10');  // Fin menor que inicio (inválido)
      
      await percentInput.clearValue();
      await browser.pause(300);
      await percentInput.setValue('5');
      
      console.log('Valores inválidos establecidos: inicio=20, fin=10, porcentaje=5');
      
      // 4. Hacer clic en el botón de guardar
      const saveButton = await dialog.$('button[type="submit"]');
      await saveButton.waitForClickable({ timeout: 5000 });
      await saveButton.click();
      
      console.log('Botón de guardar pulsado, verificando errores...');
      
      // 5. Esperar y verificar que aparecen errores de validación
      await browser.pause(2000);
      
      // Tomar captura de pantalla para verificar el estado
      await browser.saveScreenshot('./errorShots/validation-errors.png');
      
      // Verificar si el formulario se mantiene abierto (no se cerró porque hubo errores)
      const formExists = await dialog.isExisting();
      expect(formExists).toBe(true);
      console.log('El formulario permanece abierto (correcto)');
      
      // 6. Verificar si hay algún mensaje de error visible
      const errorMessages = await dialog.$$('.MuiFormHelperText-root.Mui-error, [role="alert"]');
      const hasErrors = errorMessages.length > 0;
      expect(hasErrors).toBe(true);
      
      if (hasErrors) {
        const errorTexts = await Promise.all(errorMessages.map(e => e.getText()));
        console.log('Errores de validación encontrados:', errorTexts);
      }
      
      // Cerrar el formulario haciendo clic en cancelar o fuera del diálogo
      try {
        const cancelButton = await dialog.$('button*=Cancelar');
        if (await cancelButton.isExisting()) {
          await cancelButton.click();
          console.log('Formulario cerrado mediante botón Cancelar');
        } else {
          // Intentar hacer clic en un punto fuera del diálogo
          const backdrop = await $('.MuiBackdrop-root');
          if (await backdrop.isExisting()) {
            await backdrop.click();
            console.log('Formulario cerrado haciendo clic en el fondo');
          }
        }
      } catch (error) {
        console.warn('No se pudo cerrar el formulario:', error);
      }
      
      // Verificar que el diálogo se ha cerrado
      await browser.pause(1000);
      const dialogClosed = !(await dialog.isExisting());
      expect(dialogClosed).toBe(true);
      console.log('Diálogo cerrado correctamente');
      
    } catch (error) {
      console.error('Error en la prueba de validación:', error);
      await browser.saveScreenshot('./errorShots/validation-test-error.png');
      throw error;
    }
  });

  /**
   * Test que verifica que los rangos no se pueden superponer
   */
  it('debe mostrar error cuando se intenta crear un rango superpuesto', async () => {
    try {
      // Primero crear un rango de prueba específico para esta prueba
      console.log('Creando rango inicial para prueba de superposición...');
      
      // 1. Hacer clic en el botón de añadir
      const addButton = await $('.MuiFab-root, button[aria-label="add"]');
      await addButton.waitForClickable({ timeout: 5000 });
      await addButton.click();
      await browser.pause(1000);
      
      // 2. Esperar a que aparezca el diálogo
      const dialog = await $('.MuiDialog-root');
      await dialog.waitForExist({ timeout: 5000 });
      
      // 3. Completar el formulario con un rango específico
      const startInput = await dialog.$('input[name="start"]');
      const endInput = await dialog.$('input[name="end"]');
      const percentInput = await dialog.$('input[name="percent"]');
      
      await startInput.waitForExist({ timeout: 5000 });
      
      await startInput.clearValue();
      await browser.pause(300);
      await startInput.setValue('70');
      
      await endInput.clearValue();
      await browser.pause(300);
      await endInput.setValue('80');
      
      await percentInput.clearValue();
      await browser.pause(300);
      await percentInput.setValue('12');
      
      console.log('Valores establecidos para rango inicial: inicio=70, fin=80, porcentaje=12');
      
      // 4. Guardar el rango
      const saveButton = await dialog.$('button[type="submit"]');
      await saveButton.waitForClickable({ timeout: 5000 });
      await saveButton.click();
      
      // 5. Esperar a que se cierre el formulario
      await browser.pause(2000);
      
      // Verificar que el diálogo se ha cerrado
      const dialogClosed = !(await $('.MuiDialog-root').isExisting());
      if (!dialogClosed) {
        console.warn('El diálogo no se cerró después de crear el primer rango, verificando errores...');
        await browser.saveScreenshot('./errorShots/overlap-first-range-error.png');
        
        // Intentar cerrar el diálogo
        try {
          const cancelButton = await $('.MuiDialog-root').$('button*=Cancelar');
          if (await cancelButton.isExisting()) {
            await cancelButton.click();
          }
        } catch (e) {
          console.warn('No se pudo cerrar el diálogo del primer rango:', e);
        }
        
        // Si no pudimos crear el primer rango, no podemos continuar con la prueba
        throw new Error('No se pudo crear el primer rango para la prueba de superposición');
      }
      
      console.log('Rango inicial creado correctamente. Intentando crear rango superpuesto...');
      
      // Ahora intentar crear un rango superpuesto
      // 6. Hacer clic nuevamente en el botón de añadir
      const addButtonAgain = await $('.MuiFab-root, button[aria-label="add"]');
      await addButtonAgain.waitForClickable({ timeout: 5000 });
      await addButtonAgain.click();
      await browser.pause(1000);
      
      // 7. Esperar a que aparezca el diálogo
      const dialogAgain = await $('.MuiDialog-root');
      await dialogAgain.waitForExist({ timeout: 5000 });
      
      // 8. Completar el formulario con un rango superpuesto
      const startInputAgain = await dialogAgain.$('input[name="start"]');
      const endInputAgain = await dialogAgain.$('input[name="end"]');
      const percentInputAgain = await dialogAgain.$('input[name="percent"]');
      
      await startInputAgain.waitForExist({ timeout: 5000 });
      
      await startInputAgain.clearValue();
      await browser.pause(300);
      await startInputAgain.setValue('75');  // Superpuesto con el rango anterior
      
      await endInputAgain.clearValue();
      await browser.pause(300);
      await endInputAgain.setValue('85');
      
      await percentInputAgain.clearValue();
      await browser.pause(300);
      await percentInputAgain.setValue('15');
      
      console.log('Valores establecidos para rango superpuesto: inicio=75, fin=85, porcentaje=15');
      
      // 9. Intentar guardar el rango superpuesto
      const saveButtonAgain = await dialogAgain.$('button[type="submit"]');
      await saveButtonAgain.waitForClickable({ timeout: 5000 });
      await saveButtonAgain.click();
      
      // 10. Esperar y verificar la respuesta
      await browser.pause(2000);
      
      // Tomar captura de pantalla para verificar el estado
      await browser.saveScreenshot('./errorShots/overlap-test.png');
      
      // 11. Verificar si el formulario sigue abierto (esperamos que sí, debido a la validación)
      // o si aparece un mensaje de error
      const formStillOpen = await dialogAgain.isExisting();
      
      if (formStillOpen) {
        console.log('El formulario sigue abierto, verificando errores de validación...');
        
        // Verificar si hay mensajes de error en el formulario
        const errorMessages = await dialogAgain.$$('.MuiFormHelperText-root.Mui-error, [role="alert"]');
        const hasErrors = errorMessages.length > 0;
        
        if (hasErrors) {
          const errorTexts = await Promise.all(errorMessages.map(e => e.getText()));
          console.log('Errores de validación encontrados:', errorTexts);
          expect(hasErrors).toBe(true);
        } else {
          console.warn('El formulario sigue abierto pero no se encontraron mensajes de error');
        }
        
        // Cerrar el formulario
        try {
          const cancelButton = await dialogAgain.$('button*=Cancelar');
          if (await cancelButton.isExisting()) {
            await cancelButton.click();
            console.log('Formulario cerrado mediante botón Cancelar');
          }
        } catch (error) {
          console.warn('No se pudo cerrar el formulario:', error);
        }
      } else {
        // Si el formulario se cerró, debería haber un mensaje de error en una alerta
        console.log('El formulario se cerró, verificando alerta de error...');
        
        try {
          const errorAlert = await $('.MuiAlert-standardError, [role="alert"]');
          const errorExists = await errorAlert.isExisting();
          
          if (errorExists) {
            const errorText = await errorAlert.getText();
            console.log('Alerta de error encontrada:', errorText);
            expect(errorExists).toBe(true);
          } else {
            console.warn('No se encontró alerta de error después de cerrar el formulario');
            throw new Error('El formulario se cerró sin mostrar error de superposición');
          }
        } catch (error) {
          console.warn('Error al buscar alerta de error:', error);
          throw error;
        }
      }
    } catch (error) {
      console.error('Error en la prueba de rango superpuesto:', error);
      await browser.saveScreenshot('./errorShots/overlap-test-error.png');
      throw error;
    }
  });
});
